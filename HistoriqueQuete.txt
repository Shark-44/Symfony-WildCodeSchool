💪 Challenge 1 Controller

La page d'accueil de ton site 🏡

Lors des étapes tu as créé la page d'index de tes séries.
Mais qu’en est-il de ta page d'accueil ?

    Crée un nouveau contrôleur DefaultController

    Crée une méthode index() et une route en attribut nommée app_index qui devra répondre à une requête sur l'url / (la page par défaut de ton site finalement).

    Elle devra afficher un titre <h1> contenant "Bienvenue !" grâce à un template Twig nommé index.html.twig à la racine. Pour rappel, n'étends pas base.html.twig pour le moment. De plus, ne pense pas au CSS, tu t’en chargeras lors d’une prochaine quête !

Critères de validation

    Il y a un fichier DefaultController.php dans src/Controller de l'arborescence.

    Ce fichier comporte une classe DefaultController et étend le AbstractController de base de Symfony.

    La route sur / est faite en attribut et est nommée app_index.

    Le méthode index() du contrôleur se finit par un return $this->render('path_vers_un_twig');.

    Le fichier Twig index.html.twig comprend un titre h1 "Bienvenue !".

    L'URL http://localhost:8000/ est fonctionnelle et le titre s'affiche. 🙂
   -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    💪 Challenge 2 Webpack Bootstrap

    C’est le moment de donner de la couleur et de la vie à ton Wild Series ! Grâce à Webpack et Bootstrap (on parle bien du Framework web ce coup-ci !).

    - Installe et configure Webpack Encore pour ton projet Wild Series.
    - Charge SASS loader.
    - Intègre le framework Bootstrap (en suivant la ressource).
    - Créé une navbar dans un fichier _navbar.html.twig et inclus ce fichier dans une balise <header> de ton fichier base.html.twig, afin que celle-ci s’affiche sur toutes les pages.
    - Ajoute un simple lien permettant de revenir sur la page d’accueil (Utilise une navbar Bootstrap)
    - Surcharge les variables de couleurs primaires et secondaires en te basant sur ton styleguide.
    - Modifie le projet pour que tous tes assets (JS, CSS) soient dans le dossier assets/, et lance le build de Webpack Encore.
    - Modifie tes appels aux assets pour que ton site utilise ceux générés dans ton dossier build/.
    - Héberge le projet sur Github avec tous les fichiers non suivis dans le .gitignore.
    - Bonus : ajoute une favicon de ton choix dans le dossier images et appelle là.
    Hint : https://alsacreations.com/astuce/lire/59-icon-link-rel-favicon-ico-navigateur.html

Critères de validation

Symfony Encore est bien intégré dans le projet.

    Bootstrap est bien chargé dans tes pages (regarde les sources HTML et vérifie que tu n'as pas de 404 sur tes fichiers dans l'inspecteur > "Réseau").
    La navbar de Bootstrap s'affiche correctement sur tes pages
----------------------------------------------------------------------------------------------------------------------------------------------------

💪 Challenge 3 Routing

Crée ta propre route

Crée une route /program/{id}/ permettant de charger une vue affichant l'id du programme sous forme de titre, dans une balise <h1>.

    Le paramètre id doit être un entier.
        Si l'id n'est pas un entier, la route devra renvoyer une erreur 404 (utilise les requirements de paramètres).
    La route devra être reliée à une méthode show du ProgramController.
    La route ne devra être accessible qu'en GET.

Critères de validation

    La route est correctement définie, via un attribute, et est reliée à la méthode show() de ProgramController.
    La classe ProgramController est annotée de manière à ce que toutes les routes de ce controller soient préfixées par /program/ et leur name préfixé par "program_".
    Une vue templates/program/show.html.twig est créée.
    Le résultat correspond aux attentes :
        La route /program/4 affiche bien une vue avec en titre "Program 4" dans un <h1>.
        La route /program/quatre n'affiche rien (erreur 404) car le paramètre n'est pas un entier.
    La route n'est accessible qu'en GET. Tu peux tester qu'un POST sur ta route te retourne bien un 405 en exécutant la commande suivante dans ton terminal.

curl -I -X POST "http://localhost:8000/program/4"

Lien de téléchargement pour curl ou alors sudo apt install curl.

    Ton code devra être poussé sur un repository 
--------------------------------------------------------------------------------------------------------------------------------------------

💪 Challenge 4 Doctrine

Crée les entités Category et Program (sans liaison)

Crée deux entités Category et Program.

    Category
        name : string (Obligatoire)
    Program
        title : string (Obligatoire)
        synopsis : text (Obligatoire)
        poster : string (Facultative)

Pour le moment ces deux entités ne sont pas liées.
Tu dois également mettre à jour ta base de données en conséquence.
Critères de validation

    Lance la commande doctrine:mapping:info, le résultat affiche bien les deux entités Category et Program.
    Lance la commande doctrine:schema:validate, le résultat affiche bien OK pour le mapping ET la base de données.
    Ton code est disponible sur un repository GitHub
---------------------------------------------------------------------------------------------------------------------
💪 Challenge 5 fixtures

Pour ce challenge, tu devras simplement ajouter des catégories à l'aide des fixtures. Si tu as bien suivi cette quête, tout est déjà fait !
🧐 Critères de validation

    Lorsque php bin/console doctrine:fixtures:load est exécuté, il n y a pas de message d'erreur,
    Les fixtures génèrent plusieurs catégories,
    Les noms des catégories sont définis "à la main" dans la classe App\DataFixtures\CategoryFixtures,
    Le code est disponible sur un repository GitHub, avec une branche correspondant à cette quête.
----------------------------------------------------------------------------------------------------------------------

💪 Challenge 6 Relation avec Doctrine

Crée la relation ManyToOne

Ce challenge sera très simple, car tu as besoin des quêtes suivantes pour mettre en place des choses plus complexes. Il s'agira uniquement de contrôler visuellement le code de la classe Program. Cette dernière doit être conforme à ce qui est expliqué dans la quête. C’est-à-dire, une classe Program.php qui contient une propriété category paramétrée comme il se doit dans ses attributes avec les getter et setter associés.
Critères de validation

    La propriété category est présente et privée.

    Le getter et setter correspondants sont présents et publics.

    Les attributes ManyToOne et JoinColumn sont présentes et correctement paramétrées (nullable=false)

    Le use nécessaire pour les attirbutes #[ORM] est en place.

    Une (et une seule) classe de migration est présente, ajoutant une clé étrangère côté program.

    Le code à jour est disponible sur un repository GitHub

-------------------------------------------------------------------------------------------------------------------------------------------------------------

💪 Challenge 7 Les fixtures avancées avec jointures

Alimente ton Wild Séries

Maintenant que les fixtures n'ont plus de secret pour toi, profite de ce challenge pour insérer des fixtures pour toutes les données de ton application, à savoir :

    Des catégories (au moins 5)
    Des programmes (au moins 5)

🧐 Critères de validation

    Lorsque symfony console doctrine:fixtures:load est exécuté, il n y a pas de message d'erreur,
    La navigation montre que toutes les données ont bien été insérées
    Le code est disponible sur un repository GitHub, avec une branche correspondant à cette quête.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

💪 Challenge 8 lecture des données

findBy() : récupérer plusieurs objets avec des filtres

Tu as utilisé pour le moment les méthodes findAll() et findOneBy().
Il est temps pour toi de mettre en pratique la méthode findBy(). Le principe reste identique à la méthode findOneBy(), mais au lieu de récupérer strictement une seule ligne, tu en récupères plusieurs en fonction de paramètres donnés.
Objectif : Afficher les séries appartenant à une catégorie donnée.

Liste toutes les catégories

    Crée un nouveau fichier CategoryController.php qui contiendra la classe du même nom.
        toutes les routes de cette classe seront préfixées par /category et leur nom par category_
    Crée une méthode index() (route = /category/, route_name = category_index)
        cette méthode récupère toutes les catégories présentes en base de données et les transmettra à une vue templates/category/index.html.twig.
    Crée une vue templates/category/index.html.twig qui affiche la liste des catégories que tu viens de récupérer.

Affiche les programmes d'une catégorie

    Dans ta classe CategoryController crée une méthode show(string $categoryName) (route = /category/{categoryName}, route_name = category_show)
        Dans un premier temps, cette méthode récupère l'objet Category dont le nom est passé en paramètre.
        Si aucune catégorie avec ce nom n'est présente en base, retourne une erreur 404.
        Si une catégorie existe, cette méthode récupère toutes les séries présentes en base de données qui appartiennent à cette catégorie.
        Au maximum, 3 séries devront être récupérées, ordonnées par ID décroissant.
        Ces séries seront transmises à une vue templates/category/show.html.twig
    Crée une vue templates/category/show.html.twig qui affiche la liste des séries que tu viens de récupérer :
        Tu dois afficher l'ID de la série, son titre et son résumé.
        Si aucune série n'est présente dans la catégorie, affiche un message "Aucune série trouvée".
    Pour chaque série, ajoute un lien pour pouvoir visualiser sa fiche (tu peux t'aider de ce que tu à fait précédemment lors du cours de la quête dans la vue program/index.html.twig)
    Enfin, depuis la liste des catégories dans ta vue category/index.html.twig ajoute un lien vers la fiche de chaque Category.

Critères de validation

    Un nouveau contrôleur CategoryController a été créé.
    Il contient 2 méthodes : index() et show(string $categoryName)
    Lorsqu'on se rend sur l'URL /category/, la liste des catégories apparaît.
    Si je clique sur une catégorie je suis redirigé vers la fiche de cette catégorie (l'URL : /category/horreur par exemple.)
    Cette page affiche la liste des 3 dernières séries appartenant à la catégorie Horreur avec pour chacune, son ID, son titre et son résumé.
    Si je clique sur le titre d'une série je suis redirigé vers sa fiche.
    Si je tente d'accéder à la fiche d'une catégorie qui n'existe pas, j'obtiens une erreur 404 (exemple: /category/Trucmuche => 404 : "Aucune catégorie nommée TrucMuche")
    Le code est disponible sur un repository GitHub, avec une branche correspondant à cette quête.


